<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

	<!--
		1단계: 인증과 권한 처리
		in-memory 방식으로 사용자 생성 후 권한 설정
		스프링이 제공하는 처리 과정을 그대로 > auto-config="true" 쓰면 로그인 처리 자동화
		
		///주의-첫 번째로 쓰지 말자///
		3.x.x 버전 	 > access="ROLE_USER"
		4.x.x 버전 이후 > access="hasRole('ROLE_USER')"
	-->
	
	
	<!-- 1단계 -->
	<!-- <security:http auto-config="true">
		<security:csrf disabled="true"/> 방어 처리를 하겠단 뜻
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
		위 주소로 들어오면 권한을 검사하겠다는 뜻
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
	</security:http>
	<security:authentication-manager> 테스트용 유저 만드는 코드(실제론 이렇게 안 씀)
		<security:authentication-provider>
			<security:user-service>
				<security:user name="hong" password="1004" authorities="ROLE_USER"/>
				<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> -->
	
	<!--
		1단계: 로그인 페이지 제공
		 <form name='f' action='/SpringMVC_Basic03_Sts_Mybatis_Security/login' method='POST'>
		 	<input type='text' name='username' value=''>
		 	<input name="_csrf" type="hidden" value="9c1dc5ca-048b-4f20-851f-a6ded4ffc26b" />
		 </form>
		 
		1. 요청 주소가 /login > 요청 > controller 동작 > id, pwd 검증 및 권한 확인 > session > 페이지
		   		난 이런 거 만든 적 없는데... Spring이 다 해버림...ㅎ;;;
		   			/logout > 처리
		   			/login?error > 에러 처리
	-->
	
	
	
	
	
	<!-- 2단계: customizing -->
	<!-- 이렇게 처리한다고 해서 로그인에 관한 처리를 '직접'하는 건 아님. 처리는 스프링이 하고 있다.
		기본적인 요청 주소와 파라미터 값은 정해진 대로 써야 한다.
	 
	 >>form-login 속성 정의하기

		login-page : login form 페이지 URL
		username-parameter : form id의 name 속성값  (email >> id)
		password-parameter : form pw의 name 속성값
		login-processing-url : form action 값 (security를 이용해 인증처리)
		default-target-url : 로그인 성공 시 이동 URL
		authentication-failure-url : 로그인 실패 시 이동 URL
		always-use-default-target : true 로 하면 무조건 default-target-url 로 이동한다.
		                            false 로 하면 authentication-success-handler 대로 redirect 된다.
		authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
		만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
		res.sendRedirect 등으로 처리
		authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
		
		
		>> security:logout
		logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
		logout-success-url : 로그아웃 성공 시 이동 URL
		success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
		invalidate-session : 로그아웃 시 세션 삭제여부
		
		>>session-management
		invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
		max-sessions : 최대 허용 가능한 세션 수
		expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
		error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
	 -->
	 
	<!-- <security:http>
		<security:csrf disabled="true"/>
		<security:form-login login-page="/joinus/login.htm"
							 authentication-failure-url="/joinus/login.htm?error"/> 파라미터값은 스프링이 알아서 넘겨줌
							 web은 history를 저장하기 때문에 default-target을 설정하지 않으면 직전 페이지로 이동함
		<security:logout logout-success-url="/index.htm"/>
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')"/>
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="hong" password="1004" authorities="ROLE_USER"/>
				<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> -->
	
	
	
	
	
	<!-- 3단계: JDBC를 사용하여 DB 연결 -->
	<security:http>
		<security:csrf disabled="true"/>
		<security:form-login default-target-url="/index.htm" 
							 login-page="/joinus/login.htm"
							 authentication-failure-url="/joinus/login.htm?error"/>
		<security:logout logout-success-url="/index.htm"/>
		<security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_USER')" />
	  	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="driverManagerDataSource"
				users-by-username-query="SELECT USERID, pwd AS PASSWORD, 1 enabled FROM member where userid=?"
				authorities-by-username-query="select m.USERID , r.ROLE_NAME  
									           from member m join roll r 
									           on m.userid = r.userid 
									           where m.userid=?"
			/>
			<security:password-encoder ref="bCryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	<!-- 권한 없는 상태에서 /admin/** 으로 접근하면 403에러(권한 에러) / 권한 있는 상태로 하면 404(page not found) -->
	
</beans> 

	





